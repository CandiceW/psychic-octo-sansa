/assign(truck t) {
	if no more parcel then go back
	loop over parcels, add each parcelsâ€™ scoring into a max-heap [getScore]
	while not assigned {
		poll 
		if not in assigned mapping then assign
		else (already assigned) then compare the already assigned score with the newly get one, if the new one is better then assign and reassign the old one
	}
}

getTruckTakeParcelScore(truck t, parcel p) {
	return cost of distance from t to p plus getToDestinationScore( t,  p)
}

getToDestinationScore(truck t, parcel p) {
	if same color then m=multiplier else m=1
	get length from p to destination and calculate cost c
	if p held by another then ec=drop off+pick up 
	else if p held by t then ec=0
	else ec = pickup
	return payof*m-ec-c-dropoff
}

reAssign(truck) {
	if truck loaded then drop off
	assign(truck)
}

New Design:

class WorkQueue:
	queue linkedlist of parcels
	dist distance of traveling from depot through all parcels then back to depot
	c color of the truck
	current the parcel currently being delivered

	addOptimal(Parcel) //add parcel to its optimal position in the queue

queue forming(list wq, parcel ps){
while ps not empty: iterate over ps: optimalInsertionscore get optimal push p in
}

int optimalInsertionScore(list of wq, p) {
	list of wq.dist; score = int.minvalue
	o = (max(wq.dist)*wq.size()-sum(wq.dist))*waiting cost + sum(wq.dist)*runningcost
	for wqe in wq: 
wq.dist +=wqe.distdiff(p); 
n = (above) 
score = colorbonus - n-o  
if score > score then use new
	return score
}

//p^2 approximately for evaluating score of a sequence 

wqe optimalInsertion(list of wq, p) {
	list of wq.dist; score = minvalue; WorkQueue wqr
	o = (max(wq.dist)*wq.size()-sum(wq.dist))*waiting cost + sum(wq.dist)*runningcost
	for wqe in wq: wq.dist +=wqe.distdiff(p); n = (above) score = colorbonus - n-o  if score > score then use new also wqr = wqe
}

sum(arraylist) {}    max(arraylist){}
